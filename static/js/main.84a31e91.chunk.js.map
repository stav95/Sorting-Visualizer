{"version":3,"sources":["Visualizer/Visualizer.jsx","sortingAlgorithms/mergeSort.js","sortingAlgorithms/bubbleSort.js","sortingAlgorithms/selectionSort.js","App.js","serviceWorker.js","index.js"],"names":["NUMBERS_OF_BARS","ANIMATION_SPEED","LOCK_CONTROLS","Visualizer","props","state","array","arraySizeMin","arraySizeMax","arraySizeValue","animationSpeedMin","animationSpeedMax","animationSpeedValue","this","createNewArray","index","push","value","getRandomInteger","elements","document","getElementsByClassName","i","length","style","backgroundColor","transform","setState","min","max","Math","floor","random","lock","id","getElementById","color","bars","leftValue","window","innerWidth","className","onClick","minValue","maxValue","onChange","changeArraySize","changeAnimationSpeed","performMergeSort","performBubbleSort","performSelectionSort","map","idx","key","height","width","BAR_WIDTH","left","top","lock_controls","reset_bars","animations","mergeSort","obj","mid","arrayLeft","slice","startIndex","arrayRight","objLeft","objRight","resultArray","leftIndex","rightIndex","group","forEach","ele","order","merge","countTimes","setTimeout","anim","j","transformX","replace","transitionDuration","MAX","limit","move","final","tmp","id1","id2","index1","index2","bubbleSort","countTime","ele1","ele2","transformX1","transformX2","minIndex","selectionSort","posX","get_x_pos_transform","indexOf","React","Component","App","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.84a31e91.chunk.js","sourcesContent":["import { mergeSort } from '../sortingAlgorithms/mergeSort.js';\r\nimport { bubbleSort } from '../sortingAlgorithms/bubbleSort.js';\r\nimport { selectionSort } from '../sortingAlgorithms/selectionSort.js';\r\n\r\nimport React from 'react';\r\nimport './Visualizer.css';\r\n\r\nimport '../../node_modules/react-input-range/lib/css/index.css';\r\nimport InputRange from 'react-input-range';\r\n\r\n\r\nlet NUMBERS_OF_BARS = 10;\r\nconst BAR_WIDTH = 45;\r\nconst MIN = 20;\r\nconst MAX = 400;\r\n\r\nconst MAIN_COLOR = 'turquoise';\r\nconst LAST_PLACE_COLOR = 'purple';\r\nconst CHECKING_COLOR = 'yellow';\r\nconst SELECTED_ALGO_COLOR = 'khaki';\r\nlet ANIMATION_SPEED = 500;\r\nlet LOCK_CONTROLS = false;\r\n\r\nexport default class Visualizer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            array: [],\r\n            arraySizeMin: 1,\r\n            arraySizeMax: 100,\r\n            arraySizeValue: NUMBERS_OF_BARS,\r\n            animationSpeedMin: 10,\r\n            animationSpeedMax: 5000,\r\n            animationSpeedValue: ANIMATION_SPEED\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.createNewArray();\r\n    }\r\n\r\n    createNewArray() {\r\n        if (LOCK_CONTROLS)\r\n            return;\r\n\r\n        let array = [];\r\n\r\n        for (let index = 0; index < NUMBERS_OF_BARS; index++) {\r\n            array.push({\r\n                index: index,\r\n                value: this.getRandomInteger(MIN, MAX)\r\n            });\r\n        }\r\n\r\n        let elements = document.getElementsByClassName('array-bar');\r\n        for (let i = 0; i < elements.length; i++) {\r\n            elements[i].style.backgroundColor = MAIN_COLOR;\r\n            elements[i].style.transform = '';\r\n        }\r\n\r\n        this.setState({ array });\r\n    }\r\n\r\n    changeArraySize(value) {\r\n        if (LOCK_CONTROLS)\r\n            return;\r\n\r\n        this.setState({ arraySizeValue: value })\r\n        NUMBERS_OF_BARS = value;\r\n        this.createNewArray();\r\n    }\r\n\r\n    changeAnimationSpeed(value) {\r\n        if (LOCK_CONTROLS)\r\n            return;\r\n\r\n        this.setState({ animationSpeedValue: value })\r\n        ANIMATION_SPEED = value;\r\n    }\r\n    getRandomInteger(min, max) {\r\n        // include min, max\r\n        return Math.floor(Math.random() * (max - min + 1) + min);\r\n    }\r\n\r\n    lock_controls(lock, id) {\r\n        LOCK_CONTROLS = lock;\r\n\r\n        if (id != null && id.length > 0)\r\n            document.getElementById(id).style.color = lock ? SELECTED_ALGO_COLOR : \"\";\r\n    }\r\n\r\n    reset_bars() {\r\n        let bars = document.getElementsByClassName('array-bar');\r\n\r\n        for (let i = 0; i < bars.length; i++) {\r\n            bars[i].style.transform = '';\r\n            bars[i].style.backgroundColor = MAIN_COLOR;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let array = this.state.array;\r\n        let leftValue = ((window.innerWidth - (NUMBERS_OF_BARS * BAR_WIDTH)) / 2);\r\n        return (\r\n            <div>\r\n                <div id=\"top-menu\" >\r\n                    <div id=\"createNewArray\" className=\"element-top-menu\" onClick={() => this.createNewArray()}>Create New Array</div>\r\n                    <div className=\"separator\"></div>\r\n                    <div className=\"element-top-menu normal-cursor\">Change Array Size</div>\r\n                    <div className=\"range\">\r\n                        <InputRange\r\n                            minValue={this.state.arraySizeMin}\r\n                            maxValue={this.state.arraySizeMax}\r\n                            value={this.state.arraySizeValue}\r\n                            onChange={value => this.changeArraySize(value)} />\r\n                    </div>\r\n                    <div className=\"separator\"></div>\r\n                    <div className=\"element-top-menu normal-cursor\">Change Sorting Speed</div>\r\n                    <div className=\"range\">\r\n                        <InputRange\r\n                            minValue={this.state.animationSpeedMin}\r\n                            maxValue={this.state.animationSpeedMax}\r\n                            value={this.state.animationSpeedValue}\r\n                            onChange={value => this.changeAnimationSpeed(value)} />\r\n                    </div>\r\n                    <div className=\"separator\"></div>\r\n                    <div className=\"separator\"></div>\r\n                    <div className=\"separator\"></div>\r\n                    <div id=\"algoMergeSort\" className=\"element-top-menu algo\" onClick={() => this.performMergeSort()}>Merge Sort</div>\r\n                    <div className=\"separator\"></div>\r\n                    <div id=\"algoBubbleSort\" className=\"element-top-menu algo\" onClick={() => this.performBubbleSort()}>Bubble Sort</div>\r\n                    <div className=\"separator\"></div>\r\n                    <div id=\"algoSelectionSort\" className=\"element-top-menu algo\" onClick={() => this.performSelectionSort()}>Selection Sort</div>\r\n                </div>\r\n                {\r\n                    array.map((value, idx) => (\r\n                        <div\r\n                            id={idx}\r\n                            className=\"array-bar\"\r\n                            key={idx}\r\n                            style={{\r\n                                backgroundColor: MAIN_COLOR,\r\n                                height: `${value.value}px`,\r\n                                width: BAR_WIDTH - 4,\r\n                                left: leftValue + (BAR_WIDTH * idx),\r\n                                top: '120px'\r\n                            }}>\r\n                                {value.value}\r\n                            </div>\r\n                    ))\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n\r\n    performMergeSort() {\r\n        if (LOCK_CONTROLS)\r\n            return;\r\n\r\n        this.lock_controls(true, 'algoMergeSort');\r\n        this.reset_bars();\r\n\r\n        const array = [...this.state.array];\r\n        let animations = [];\r\n\r\n        mergeSort({ array: array, startIndex: 0 }, animations);\r\n\r\n        let countTimes = [0];\r\n        for (let i = 0; i < animations.length - 1; i++) {\r\n            countTimes.push(\r\n                animations[i].group.length * ANIMATION_SPEED\r\n                + ANIMATION_SPEED\r\n                + countTimes[countTimes.length - 1]);\r\n        }\r\n\r\n        for (let i = 0; i < animations.length; i++) {\r\n            setTimeout(() => {\r\n                const anim = animations[i];\r\n                let group = anim.group;\r\n                let order = anim.order;\r\n\r\n                for (let j = 0; j < group.length; j++) {\r\n                    let ele = document.getElementById(group[j]);\r\n\r\n                    let transformX = ele.style.transform.replace('translateX(', '').replace(')', '');\r\n                    if (transformX.length === 0)\r\n                        transformX = '0px';\r\n\r\n                    ele.style.transitionDuration = `${ANIMATION_SPEED / 1000}s`;\r\n                    ele.style.transform = `translate(${transformX},${MAX + 10}px)`;\r\n                }\r\n\r\n                for (let j = 0; j < order.length; j++) {\r\n                    setTimeout(() => {\r\n                        let ele = document.getElementById(order[j].id);\r\n                        let transformX = (order[j].index - order[j].id) * BAR_WIDTH;\r\n\r\n                        ele.style.transitionDuration = `${ANIMATION_SPEED / 1000}s`;\r\n                        ele.style.transform = `translateX(${transformX}px)`;\r\n\r\n                        if (i === animations.length - 1) {\r\n                            ele.style.backgroundColor = LAST_PLACE_COLOR;\r\n                        }\r\n\r\n                        if (i === animations.length - 1 && j === order.length - 1) {\r\n                            this.lock_controls(false, 'algoMergeSort');\r\n                        }\r\n                    }, ANIMATION_SPEED * (j + 1));\r\n                }\r\n            }, countTimes[i]);\r\n        }\r\n    }\r\n\r\n    performBubbleSort() {\r\n        if (LOCK_CONTROLS)\r\n            return;\r\n\r\n        this.lock_controls(true, 'algoBubbleSort');\r\n        this.reset_bars();\r\n\r\n        const array = [...this.state.array];\r\n        let animations = [];\r\n\r\n        bubbleSort(array, animations);\r\n\r\n        let countTime = 0;\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const anim = animations[i];\r\n\r\n            let ele1 = document.getElementById(anim.id1);\r\n            let ele2 = document.getElementById(anim.id2);\r\n\r\n            ele1.style.transitionDuration = `${ANIMATION_SPEED / 1000}s`;\r\n            ele2.style.transitionDuration = `${ANIMATION_SPEED / 1000}s`;\r\n\r\n            setTimeout(() => {\r\n                ele1.style.backgroundColor = CHECKING_COLOR;\r\n                ele2.style.backgroundColor = CHECKING_COLOR;\r\n            }, countTime);\r\n\r\n            if (anim.move) {\r\n                let transformX1 = (anim.index1 - anim.id1) * BAR_WIDTH;\r\n                let transformX2 = (anim.index2 - anim.id2) * BAR_WIDTH;\r\n\r\n                countTime += ANIMATION_SPEED;\r\n                setTimeout(() => {\r\n                    ele1.style.transform = `translateX(${transformX1}px)`;\r\n                    ele2.style.transform = `translateX(${transformX2}px)`;\r\n\r\n                    ele1.style.backgroundColor = MAIN_COLOR;\r\n                    ele2.style.backgroundColor = MAIN_COLOR;\r\n\r\n                    if (anim.final > -1) {\r\n                        if (i === animations.length - 1) {\r\n                            ele1.style.backgroundColor = LAST_PLACE_COLOR;\r\n                            ele2.style.backgroundColor = LAST_PLACE_COLOR;\r\n                        }\r\n                        else {\r\n                            if (ele1.id === anim.final)\r\n                                ele1.style.backgroundColor = LAST_PLACE_COLOR;\r\n                            else\r\n                                ele2.style.backgroundColor = LAST_PLACE_COLOR;\r\n                        }\r\n                    }\r\n\r\n                }, countTime);\r\n\r\n                countTime += ANIMATION_SPEED;\r\n            }\r\n            else {\r\n                countTime += ANIMATION_SPEED;\r\n                setTimeout(() => {\r\n                    ele1.style.backgroundColor = MAIN_COLOR;\r\n                    ele2.style.backgroundColor = MAIN_COLOR;\r\n\r\n                    if (anim.final > -1) {\r\n                        if (i === animations.length - 1) {\r\n                            ele1.style.backgroundColor = LAST_PLACE_COLOR;\r\n                            ele2.style.backgroundColor = LAST_PLACE_COLOR;\r\n                        }\r\n                        else {\r\n                            if (ele1.id === anim.final)\r\n                                ele1.style.backgroundColor = LAST_PLACE_COLOR;\r\n                            else\r\n                                ele2.style.backgroundColor = LAST_PLACE_COLOR;\r\n                        }\r\n                    }\r\n\r\n                }, countTime);\r\n\r\n                countTime += ANIMATION_SPEED;\r\n            }\r\n\r\n            if (i === animations.length - 1) {\r\n                setTimeout(() => {\r\n                    this.lock_controls(false, 'algoBubbleSort');\r\n                }, countTime);\r\n            }\r\n        }\r\n    }\r\n\r\n    performSelectionSort() {\r\n        if (LOCK_CONTROLS)\r\n            return;\r\n\r\n        this.lock_controls(true, 'algoSelectionSort');\r\n        this.reset_bars();\r\n\r\n        const array = [...this.state.array];\r\n        let animations = [];\r\n\r\n        selectionSort(array, animations);\r\n\r\n        const bars = document.getElementsByClassName('array-bar');\r\n\r\n        const MOVE_Y_UP = -10;\r\n        let countTime = 0;\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const anim = animations[i];\r\n\r\n            let ele1 = document.getElementById(anim.id1);\r\n            let ele2 = document.getElementById(anim.id2);\r\n\r\n            ele1.style.transitionDuration = `${ANIMATION_SPEED / 1000}s`;\r\n            ele2.style.transitionDuration = `${ANIMATION_SPEED / 1000}s`;\r\n\r\n            setTimeout(() => {\r\n                ele1.style.backgroundColor = CHECKING_COLOR;\r\n                ele2.style.backgroundColor = CHECKING_COLOR;\r\n\r\n                for (let j = 0; j < bars.length; j++) {\r\n                    let posX = this.get_x_pos_transform(j);\r\n                    let ele = document.getElementById(j);\r\n\r\n                    if (j !== anim.minIndex)\r\n                        ele.style.transform = `translate(${posX}px,0px)`;\r\n                    else\r\n                        ele.style.transform = `translate(${posX}px,${MOVE_Y_UP}px)`;\r\n                }\r\n            }, countTime);\r\n\r\n            if (anim.move) {\r\n                let transformX1 = (anim.index1 - anim.id1) * BAR_WIDTH;\r\n                let transformX2 = (anim.index2 - anim.id2) * BAR_WIDTH;\r\n\r\n                countTime += ANIMATION_SPEED;\r\n                setTimeout(() => {\r\n                    ele1.style.transform = `translate(${transformX1}px,0px)`;\r\n                    ele2.style.transform = `translate(${transformX2}px,0px)`;\r\n\r\n                    ele1.style.backgroundColor = MAIN_COLOR;\r\n                    ele2.style.backgroundColor = MAIN_COLOR;\r\n\r\n                    if (anim.final > -1) {\r\n                        if (i === animations.length - 1) {\r\n                            ele1.style.backgroundColor = LAST_PLACE_COLOR;\r\n                            ele2.style.backgroundColor = LAST_PLACE_COLOR;\r\n                        }\r\n                        else {\r\n                            if (ele1.id === anim.final)\r\n                                ele1.style.backgroundColor = LAST_PLACE_COLOR;\r\n                            else\r\n                                ele2.style.backgroundColor = LAST_PLACE_COLOR;\r\n                        }\r\n                    }\r\n\r\n                }, countTime);\r\n\r\n                countTime += ANIMATION_SPEED;\r\n            }\r\n            else {\r\n                ele1.style.transform = `translate(${this.get_x_pos_transform(anim.id1)}px,${(anim.id1 === anim.minIndex ? MOVE_Y_UP : 0)}px)`;\r\n                ele2.style.transform = `translate(${this.get_x_pos_transform(anim.id2)},${(anim.id2 === anim.minIndex ? MOVE_Y_UP : 0)}px)`;\r\n\r\n                countTime += ANIMATION_SPEED;\r\n                setTimeout(() => {\r\n                    ele1.style.backgroundColor = MAIN_COLOR;\r\n                    ele2.style.backgroundColor = MAIN_COLOR;\r\n                }, countTime);\r\n\r\n                countTime += ANIMATION_SPEED;\r\n            }\r\n\r\n            if (i === animations.length - 1) {\r\n                setTimeout(() => {\r\n                    this.lock_controls(false, 'algoSelectionSort');\r\n                }, countTime);\r\n            }\r\n        }\r\n    }\r\n\r\n    get_x_pos_transform(id) {\r\n        let posX = document.getElementById(id).style.transform.replace('translate(', '');\r\n        posX = posX.slice(0, posX.indexOf('px'));\r\n\r\n        return posX.length > 0 ? posX : 0;\r\n    }\r\n}\r\n","//obj: {array - array of elements, startIndex: start index of the array according to the original array}\r\n// array: {index: index in the original array, value: value of the element}\r\nexport function mergeSort(obj, animations) {\r\n    let array = obj.array;\r\n    if (array.length <= 1) return obj;\r\n\r\n    let mid = Math.floor(array.length / 2)\r\n\r\n    let arrayLeft = { array: array.slice(0, mid), startIndex: obj.startIndex };\r\n    let arrayRight = { array: array.slice(mid, array.length), startIndex: obj.startIndex + mid };\r\n\r\n    return merge(\r\n        mergeSort(arrayLeft, animations),\r\n        mergeSort(arrayRight, animations),\r\n        animations);\r\n}\r\n\r\nfunction merge(objLeft, objRight, animations) {\r\n    let arrayLeft = objLeft.array;\r\n    let arrayRight = objRight.array;\r\n    let startIndex = objLeft.startIndex;\r\n    let resultArray = [], leftIndex = 0, rightIndex = 0;\r\n\r\n    let group = [];\r\n\r\n    arrayLeft.forEach(ele => {\r\n        group.push(ele.index);\r\n    });\r\n\r\n    arrayRight.forEach(ele => {\r\n        group.push(ele.index);\r\n    });\r\n\r\n    let order = [];\r\n    while (leftIndex < arrayLeft.length && rightIndex < arrayRight.length) {\r\n        if (arrayLeft[leftIndex].value < arrayRight[rightIndex].value) {\r\n            order.push({\r\n                id: arrayLeft[leftIndex].index,\r\n                index: startIndex + order.length\r\n            });\r\n            resultArray.push(arrayLeft[leftIndex]);\r\n            leftIndex++;\r\n        } else {\r\n            order.push({\r\n                id: arrayRight[rightIndex].index,\r\n                index: startIndex + order.length\r\n            });\r\n            resultArray.push(arrayRight[rightIndex]);\r\n            rightIndex++;\r\n        }\r\n    }\r\n\r\n    while (leftIndex < arrayLeft.length) {\r\n        order.push({\r\n            id: arrayLeft[leftIndex].index,\r\n            index: startIndex + order.length\r\n        });\r\n        resultArray.push(arrayLeft[leftIndex]);\r\n        leftIndex++;\r\n    }\r\n\r\n    while (rightIndex < arrayRight.length) {\r\n        order.push({\r\n            id: arrayRight[rightIndex].index,\r\n            index: startIndex + order.length\r\n        });\r\n        resultArray.push(arrayRight[rightIndex]);\r\n        rightIndex++;\r\n    }\r\n\r\n    animations.push({\r\n        group: group,\r\n        order: order\r\n    });\r\n\r\n    return { array: resultArray, startIndex: startIndex };\r\n}","// array: {index: index in the original array, value: value of the element}\r\nexport function bubbleSort(array, animations) {\r\n    let limit = array.length - 1;\r\n\r\n    for (let i = 0; i < limit; i++) {\r\n        for (let j = 0; j < limit - i; j++) {\r\n            let move = false;\r\n            let final = -1;\r\n\r\n            if (limit - i - 1 === j) {\r\n                if (array[j].value > array[j + 1].value)\r\n                    final = array[j].index;\r\n                else\r\n                    final = array[j + 1].index;\r\n            }\r\n\r\n            if (array[j].value > array[j + 1].value) {\r\n\r\n                move = true;\r\n\r\n                let tmp = array[j + 1];\r\n                array[j + 1] = array[j];\r\n                array[j] = tmp;\r\n            }\r\n\r\n            animations.push({\r\n                id1: array[j].index,\r\n                id2: array[j + 1].index,\r\n                index1: j,\r\n                index2: j + 1,\r\n                move: move,\r\n                final: final\r\n            });\r\n        }\r\n    }\r\n\r\n    return array;\r\n}","// array: {index: index in the original array, value: value of the element}\r\nexport function selectionSort(array, animations) {\r\n    let max = -1;\r\n\r\n    for (let i = 0; i < array.length; i++)\r\n        if (array[i].value > max)\r\n            max = array[i].value + 1;\r\n\r\n    for (let i = 0; i < array.length; i++) {\r\n        let minIndex = 0;\r\n        let min = max;\r\n        for (let j = i; j < array.length; j++) {\r\n            if (i !== j) {\r\n                animations.push({\r\n                    id1: array[i].index,\r\n                    id2: array[j].index,\r\n                    index1: i,\r\n                    index2: j,\r\n                    minIndex: array[minIndex].index,\r\n                    move: false\r\n                });\r\n            }\r\n\r\n            if (min > array[j].value) {\r\n                min = array[j].value;\r\n                minIndex = j;\r\n            }\r\n        }\r\n\r\n        animations.push({\r\n            id1: array[i].index,\r\n            id2: array[minIndex].index,\r\n            index1: minIndex,\r\n            index2: i,\r\n            minIndex: array[minIndex].index,\r\n            move: true,\r\n            final: true\r\n        });\r\n\r\n        let tmp = array[i];\r\n        array[i] = array[minIndex];\r\n        array[minIndex] = tmp;\r\n    }\r\n}","import React from 'react';\nimport Visualizer from './Visualizer/Visualizer'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div id=\"root\" className=\"App\">\n      <Visualizer></Visualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}